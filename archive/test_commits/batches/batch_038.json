[
  {
    "sha": "4937e604ca24c41cae3296d069c871c2f3f519c8",
    "message": "scsi: core: Enforce unlimited max_segment_size when virt_boundary_mask is set\n\nThe virt_boundary_mask limit requires an unlimited max_segment_size for\nbio splitting to not corrupt data.  Historically, the block layer tried\nto validate this, although the check was half-hearted until the addition\nof the atomic queue limits API.  The full blown check then triggered\nissues with stacked devices incorrectly inheriting limits such as the\nvirt boundary and got disabled in commit b561ea56a264 (\"block: allow\ndevice to have both virt_boundary_mask and max segment size\") instead of\nfixing the issue properly.\n\nEnsure that the SCSI mid layer doesn't set the default low\nmax_segment_size limit for this case, and check for invalid\nmax_segment_size values in the host template, similar to the original\nblock layer check given that SCSI devices can't be stacked.\n\nThis fixes reported data corruption on storvsc, although as far as I can\ntell storvsc always failed to properly set the max_segment_size limit as\nthe SCSI APIs historically applied that when setting up the host, while\nstorvsc only set the virt_boundary_mask when configuring the scsi_device.\n\nFixes: 81988a0e6b03 (\"storvsc: get rid of bounce buffer\")\nFixes: b561ea56a264 (\"block: allow device to have both virt_boundary_mask and max segment size\")\nReported-by: Ming Lei <ming.lei@redhat.com>\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nLink: https://lore.kernel.org/r/20250624125233.219635-3-hch@lst.de\nReviewed-by: John Garry <john.g.garry@oracle.com>\nReviewed-by: Ming Lei <ming.lei@redhat.com>\nReviewed-by: Hannes Reinecke <hare@suse.de>\nReviewed-by: Bart Van Assche <bvanassche@acm.org>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "author": "Christoph Hellwig",
    "date": "2025-06-24T21:20:58-04:00",
    "files_changed": [
      "drivers/scsi/hosts.c"
    ],
    "diff": "diff --git a/drivers/scsi/hosts.c b/drivers/scsi/hosts.c\nindex e021f1106bea..cc5d05dc395c 100644\n--- a/drivers/scsi/hosts.c\n+++ b/drivers/scsi/hosts.c\n@@ -473,10 +473,17 @@ struct Scsi_Host *scsi_host_alloc(const struct scsi_host_template *sht, int priv\n \telse\n \t\tshost->max_sectors = SCSI_DEFAULT_MAX_SECTORS;\n \n-\tif (sht->max_segment_size)\n-\t\tshost->max_segment_size = sht->max_segment_size;\n-\telse\n-\t\tshost->max_segment_size = BLK_MAX_SEGMENT_SIZE;\n+\tshost->virt_boundary_mask = sht->virt_boundary_mask;\n+\tif (shost->virt_boundary_mask) {\n+\t\tWARN_ON_ONCE(sht->max_segment_size &&\n+\t\t\t     sht->max_segment_size != UINT_MAX);\n+\t\tshost->max_segment_size = UINT_MAX;\n+\t} else {\n+\t\tif (sht->max_segment_size)\n+\t\t\tshost->max_segment_size = sht->max_segment_size;\n+\t\telse\n+\t\t\tshost->max_segment_size = BLK_MAX_SEGMENT_SIZE;\n+\t}\n \n \t/* 32-byte (dword) is a common minimum for HBAs. */\n \tif (sht->dma_alignment)\n@@ -492,9 +499,6 @@ struct Scsi_Host *scsi_host_alloc(const struct scsi_host_template *sht, int priv\n \telse\n \t\tshost->dma_boundary = 0xffffffff;\n \n-\tif (sht->virt_boundary_mask)\n-\t\tshost->virt_boundary_mask = sht->virt_boundary_mask;\n-\n \tdevice_initialize(&shost->shost_gendev);\n \tdev_set_name(&shost->shost_gendev, \"host%d\", shost->host_no);\n \tshost->shost_gendev.bus = &scsi_bus_type;",
    "stats": {
      "insertions": 11,
      "deletions": 7,
      "files": 1
    }
  },
  {
    "sha": "8889676cd62161896f1d861ce294adc29c4f2cb5",
    "message": "scsi: sd: Fix VPD page 0xb7 length check\n\nsd_read_block_limits_ext() currently assumes that vpd->len excludes the\nsize of the page header. However, vpd->len describes the size of the entire\nVPD page, therefore the sanity check is incorrect.\n\nIn practice this is not really a problem since we don't attach VPD\npages unless they actually report data trailing the header. But fix\nthe length check regardless.\n\nThis issue was identified by Wukong-Agent (formerly Tencent Woodpecker), a\ncode security AI agent, through static code analysis.\n\n[mkp: rewrote patch description]\n\nSigned-off-by: jackysliu <1972843537@qq.com>\nLink: https://lore.kernel.org/r/tencent_ADA5210D1317EEB6CD7F3DE9FE9DA4591D05@qq.com\nFixes: 96b171d6dba6 (\"scsi: core: Query the Block Limits Extension VPD page\")\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "author": "jackysliu",
    "date": "2025-06-24T21:05:42-04:00",
    "files_changed": [
      "drivers/scsi/sd.c"
    ],
    "diff": "diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c\nindex 3f6e87705b62..eeaa6af294b8 100644\n--- a/drivers/scsi/sd.c\n+++ b/drivers/scsi/sd.c\n@@ -3384,7 +3384,7 @@ static void sd_read_block_limits_ext(struct scsi_disk *sdkp)\n \n \trcu_read_lock();\n \tvpd = rcu_dereference(sdkp->device->vpd_pgb7);\n-\tif (vpd && vpd->len >= 2)\n+\tif (vpd && vpd->len >= 6)\n \t\tsdkp->rscs = vpd->data[5] & 1;\n \trcu_read_unlock();\n }",
    "stats": {
      "insertions": 1,
      "deletions": 1,
      "files": 1
    }
  },
  {
    "sha": "7595b66ae9de667bf35a8c99e8f1bfc4792e207e",
    "message": "Merge tag 'selinux-pr-20250624' of git://git.kernel.org/pub/scm/linux/kernel/git/pcmoore/selinux\n\nPull selinux fix from Paul Moore:\n \"Another small SELinux patch to fix a problem seen by the dracut-ng\n  folks during early boot when SELinux is enabled, but the policy has\n  yet to be loaded\"\n\n* tag 'selinux-pr-20250624' of git://git.kernel.org/pub/scm/linux/kernel/git/pcmoore/selinux:\n  selinux: change security_compute_sid to return the ssid or tsid on match",
    "author": "Linus Torvalds",
    "date": "2025-06-24T17:20:43-07:00",
    "files_changed": [
      "security/selinux/ss/services.c"
    ],
    "diff": "diff --git a/security/selinux/ss/services.c b/security/selinux/ss/services.c\nindex 7becf3808818..d185754c2786 100644\n--- a/security/selinux/ss/services.c\n+++ b/security/selinux/ss/services.c\n@@ -1909,11 +1909,17 @@ static int security_compute_sid(u32 ssid,\n \t\t\tgoto out_unlock;\n \t}\n \t/* Obtain the sid for the context. */\n-\trc = sidtab_context_to_sid(sidtab, &newcontext, out_sid);\n-\tif (rc == -ESTALE) {\n-\t\trcu_read_unlock();\n-\t\tcontext_destroy(&newcontext);\n-\t\tgoto retry;\n+\tif (context_equal(scontext, &newcontext))\n+\t\t*out_sid = ssid;\n+\telse if (context_equal(tcontext, &newcontext))\n+\t\t*out_sid = tsid;\n+\telse {\n+\t\trc = sidtab_context_to_sid(sidtab, &newcontext, out_sid);\n+\t\tif (rc == -ESTALE) {\n+\t\t\trcu_read_unlock();\n+\t\t\tcontext_destroy(&newcontext);\n+\t\t\tgoto retry;\n+\t\t}\n \t}\n out_unlock:\n \trcu_read_unlock();",
    "stats": {
      "insertions": 11,
      "deletions": 5,
      "files": 1
    }
  },
  {
    "sha": "1f8aede70d491a1d5867f575ca44c86fe2e335ae",
    "message": "bcachefs: fix bch2_journal_keys_peek_prev_min() underflow\n\nSigned-off-by: Kent Overstreet <kent.overstreet@linux.dev>",
    "author": "Kent Overstreet",
    "date": "2025-06-24T18:58:18-04:00",
    "files_changed": [
      "fs/bcachefs/btree_journal_iter.c"
    ],
    "diff": "diff --git a/fs/bcachefs/btree_journal_iter.c b/fs/bcachefs/btree_journal_iter.c\nindex a41fabd06332..ea839560a136 100644\n--- a/fs/bcachefs/btree_journal_iter.c\n+++ b/fs/bcachefs/btree_journal_iter.c\n@@ -137,12 +137,15 @@ struct bkey_i *bch2_journal_keys_peek_prev_min(struct bch_fs *c, enum btree_id b\n \tstruct journal_key *k;\n \n \tBUG_ON(*idx > keys->nr);\n+\n+\tif (!keys->nr)\n+\t\treturn NULL;\n search:\n \tif (!*idx)\n \t\t*idx = __bch2_journal_key_search(keys, btree_id, level, pos);\n \n \twhile (*idx < keys->nr &&\n-\t       __journal_key_cmp(btree_id, level, end_pos, idx_to_key(keys, *idx - 1)) >= 0) {\n+\t       __journal_key_cmp(btree_id, level, end_pos, idx_to_key(keys, *idx)) >= 0) {\n \t\t(*idx)++;\n \t\titers++;\n \t\tif (iters == 10) {\n@@ -151,18 +154,23 @@ struct bkey_i *bch2_journal_keys_peek_prev_min(struct bch_fs *c, enum btree_id b\n \t\t}\n \t}\n \n+\tif (*idx == keys->nr)\n+\t\t--(*idx);\n+\n \tstruct bkey_i *ret = NULL;\n \trcu_read_lock(); /* for overwritten_ranges */\n \n-\twhile ((k = *idx < keys->nr ? idx_to_key(keys, *idx) : NULL)) {\n+\twhile (true) {\n+\t\tk = idx_to_key(keys, *idx);\n \t\tif (__journal_key_cmp(btree_id, level, end_pos, k) > 0)\n \t\t\tbreak;\n \n \t\tif (k->overwritten) {\n \t\t\tif (k->overwritten_range)\n-\t\t\t\t*idx = rcu_dereference(k->overwritten_range)->start - 1;\n-\t\t\telse\n-\t\t\t\t*idx -= 1;\n+\t\t\t\t*idx = rcu_dereference(k->overwritten_range)->start;\n+\t\t\tif (!*idx)\n+\t\t\t\tbreak;\n+\t\t\t--(*idx);\n \t\t\tcontinue;\n \t\t}\n \n@@ -171,6 +179,8 @@ struct bkey_i *bch2_journal_keys_peek_prev_min(struct bch_fs *c, enum btree_id b\n \t\t\tbreak;\n \t\t}\n \n+\t\tif (!*idx)\n+\t\t\tbreak;\n \t\t--(*idx);\n \t\titers++;\n \t\tif (iters == 10) {",
    "stats": {
      "insertions": 15,
      "deletions": 5,
      "files": 1
    }
  },
  {
    "sha": "ecf371f8b02d5e31b9aa1da7f159f1b2107bdb01",
    "message": "KVM: SVM: Reject SEV{-ES} intra host migration if vCPU creation is in-flight\n\nReject migration of SEV{-ES} state if either the source or destination VM\nis actively creating a vCPU, i.e. if kvm_vm_ioctl_create_vcpu() is in the\nsection between incrementing created_vcpus and online_vcpus.  The bulk of\nvCPU creation runs _outside_ of kvm->lock to allow creating multiple vCPUs\nin parallel, and so sev_info.es_active can get toggled from false=>true in\nthe destination VM after (or during) svm_vcpu_create(), resulting in an\nSEV{-ES} VM effectively having a non-SEV{-ES} vCPU.\n\nThe issue manifests most visibly as a crash when trying to free a vCPU's\nNULL VMSA page in an SEV-ES VM, but any number of things can go wrong.\n\n  BUG: unable to handle page fault for address: ffffebde00000000\n  #PF: supervisor read access in kernel mode\n  #PF: error_code(0x0000) - not-present page\n  PGD 0 P4D 0\n  Oops: Oops: 0000 [#1] SMP KASAN NOPTI\n  CPU: 227 UID: 0 PID: 64063 Comm: syz.5.60023 Tainted: G     U     O        6.15.0-smp-DEV #2 NONE\n  Tainted: [U]=USER, [O]=OOT_MODULE\n  Hardware name: Google, Inc. Arcadia_IT_80/Arcadia_IT_80, BIOS 12.52.0-0 10/28/2024\n  RIP: 0010:constant_test_bit arch/x86/include/asm/bitops.h:206 [inline]\n  RIP: 0010:arch_test_bit arch/x86/include/asm/bitops.h:238 [inline]\n  RIP: 0010:_test_bit include/asm-generic/bitops/instrumented-non-atomic.h:142 [inline]\n  RIP: 0010:PageHead include/linux/page-flags.h:866 [inline]\n  RIP: 0010:___free_pages+0x3e/0x120 mm/page_alloc.c:5067\n  Code: <49> f7 06 40 00 00 00 75 05 45 31 ff eb 0c 66 90 4c 89 f0 4c 39 f0\n  RSP: 0018:ffff8984551978d0 EFLAGS: 00010246\n  RAX: 0000777f80000001 RBX: 0000000000000000 RCX: ffffffff918aeb98\n  RDX: 0000000000000000 RSI: 0000000000000008 RDI: ffffebde00000000\n  RBP: 0000000000000000 R08: ffffebde00000007 R09: 1ffffd7bc0000000\n  R10: dffffc0000000000 R11: fffff97bc0000001 R12: dffffc0000000000\n  R13: ffff8983e19751a8 R14: ffffebde00000000 R15: 1ffffd7bc0000000\n  FS:  0000000000000000(0000) GS:ffff89ee661d3000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: ffffebde00000000 CR3: 000000793ceaa000 CR4: 0000000000350ef0\n  DR0: 0000000000000000 DR1: 0000000000000b5f DR2: 0000000000000000\n  DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400\n  Call Trace:\n   <TASK>\n   sev_free_vcpu+0x413/0x630 arch/x86/kvm/svm/sev.c:3169\n   svm_vcpu_free+0x13a/0x2a0 arch/x86/kvm/svm/svm.c:1515\n   kvm_arch_vcpu_destroy+0x6a/0x1d0 arch/x86/kvm/x86.c:12396\n   kvm_vcpu_destroy virt/kvm/kvm_main.c:470 [inline]\n   kvm_destroy_vcpus+0xd1/0x300 virt/kvm/kvm_main.c:490\n   kvm_arch_destroy_vm+0x636/0x820 arch/x86/kvm/x86.c:12895\n   kvm_put_kvm+0xb8e/0xfb0 virt/kvm/kvm_main.c:1310\n   kvm_vm_release+0x48/0x60 virt/kvm/kvm_main.c:1369\n   __fput+0x3e4/0x9e0 fs/file_table.c:465\n   task_work_run+0x1a9/0x220 kernel/task_work.c:227\n   exit_task_work include/linux/task_work.h:40 [inline]\n   do_exit+0x7f0/0x25b0 kernel/exit.c:953\n   do_group_exit+0x203/0x2d0 kernel/exit.c:1102\n   get_signal+0x1357/0x1480 kernel/signal.c:3034\n   arch_do_signal_or_restart+0x40/0x690 arch/x86/kernel/signal.c:337\n   exit_to_user_mode_loop kernel/entry/common.c:111 [inline]\n   exit_to_user_mode_prepare include/linux/entry-common.h:329 [inline]\n   __syscall_exit_to_user_mode_work kernel/entry/common.c:207 [inline]\n   syscall_exit_to_user_mode+0x67/0xb0 kernel/entry/common.c:218\n   do_syscall_64+0x7c/0x150 arch/x86/entry/syscall_64.c:100\n   entry_SYSCALL_64_after_hwframe+0x76/0x7e\n  RIP: 0033:0x7f87a898e969\n   </TASK>\n  Modules linked in: gq(O)\n  gsmi: Log Shutdown Reason 0x03\n  CR2: ffffebde00000000\n  ---[ end trace 0000000000000000 ]---\n\nDeliberately don't check for a NULL VMSA when freeing the vCPU, as crashing\nthe host is likely desirable due to the VMSA being consumed by hardware.\nE.g. if KVM manages to allow VMRUN on the vCPU, hardware may read/write a\nbogus VMSA page.  Accessing PFN 0 is \"fine\"-ish now that it's sequestered\naway thanks to L1TF, but panicking in this scenario is preferable to\npotentially running with corrupted state.\n\nReported-by: Alexander Potapenko <glider@google.com>\nTested-by: Alexander Potapenko <glider@google.com>\nFixes: 0b020f5af092 (\"KVM: SEV: Add support for SEV-ES intra host migration\")\nFixes: b56639318bb2 (\"KVM: SEV: Add support for SEV intra host migration\")\nCc: stable@vger.kernel.org\nCc: James Houghton <jthoughton@google.com>\nCc: Peter Gonda <pgonda@google.com>\nReviewed-by: Liam Merwick <liam.merwick@oracle.com>\nTested-by: Liam Merwick <liam.merwick@oracle.com>\nReviewed-by: James Houghton <jthoughton@google.com>\nLink: https://lore.kernel.org/r/20250602224459.41505-2-seanjc@google.com\nSigned-off-by: Sean Christopherson <seanjc@google.com>",
    "author": "Sean Christopherson",
    "date": "2025-06-24T12:20:10-07:00",
    "files_changed": [
      "arch/x86/kvm/svm/sev.c"
    ],
    "diff": "diff --git a/arch/x86/kvm/svm/sev.c b/arch/x86/kvm/svm/sev.c\nindex 459c3b791fd4..65d1597c3fed 100644\n--- a/arch/x86/kvm/svm/sev.c\n+++ b/arch/x86/kvm/svm/sev.c\n@@ -1971,6 +1971,10 @@ static int sev_check_source_vcpus(struct kvm *dst, struct kvm *src)\n \tstruct kvm_vcpu *src_vcpu;\n \tunsigned long i;\n \n+\tif (src->created_vcpus != atomic_read(&src->online_vcpus) ||\n+\t    dst->created_vcpus != atomic_read(&dst->online_vcpus))\n+\t\treturn -EBUSY;\n+\n \tif (!sev_es_guest(src))\n \t\treturn 0;\n ",
    "stats": {
      "insertions": 4,
      "deletions": 0,
      "files": 1
    }
  }
]