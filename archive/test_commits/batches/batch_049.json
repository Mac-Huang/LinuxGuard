[
  {
    "sha": "d03b79f459c7935cff830d98373474f440bd03ae",
    "message": "net: atm: fix /proc/net/atm/lec handling\n\n/proc/net/atm/lec must ensure safety against dev_lec[] changes.\n\nIt appears it had dev_put() calls without prior dev_hold(),\nleading to imbalance and UAF.\n\nFixes: 1da177e4c3f4 (\"Linux-2.6.12-rc2\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nAcked-by: Francois Romieu <romieu@fr.zoreil.com> # Minor atm contributor\nLink: https://patch.msgid.link/20250618140844.1686882-3-edumazet@google.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
    "author": "Eric Dumazet",
    "date": "2025-06-19T08:36:31-07:00",
    "files_changed": [
      "net/atm/lec.c"
    ],
    "diff": "diff --git a/net/atm/lec.c b/net/atm/lec.c\nindex 1e1f3eb0e2ba..afb8d3eb2185 100644\n--- a/net/atm/lec.c\n+++ b/net/atm/lec.c\n@@ -909,7 +909,6 @@ static void *lec_itf_walk(struct lec_state *state, loff_t *l)\n \tv = (dev && netdev_priv(dev)) ?\n \t\tlec_priv_walk(state, l, netdev_priv(dev)) : NULL;\n \tif (!v && dev) {\n-\t\tdev_put(dev);\n \t\t/* Partial state reset for the next time we get called */\n \t\tdev = NULL;\n \t}\n@@ -933,6 +932,7 @@ static void *lec_seq_start(struct seq_file *seq, loff_t *pos)\n {\n \tstruct lec_state *state = seq->private;\n \n+\tmutex_lock(&lec_mutex);\n \tstate->itf = 0;\n \tstate->dev = NULL;\n \tstate->locked = NULL;\n@@ -950,8 +950,9 @@ static void lec_seq_stop(struct seq_file *seq, void *v)\n \tif (state->dev) {\n \t\tspin_unlock_irqrestore(&state->locked->lec_arp_lock,\n \t\t\t\t       state->flags);\n-\t\tdev_put(state->dev);\n+\t\tstate->dev = NULL;\n \t}\n+\tmutex_unlock(&lec_mutex);\n }\n \n static void *lec_seq_next(struct seq_file *seq, void *v, loff_t *pos)",
    "stats": {
      "insertions": 3,
      "deletions": 2,
      "files": 1
    }
  },
  {
    "sha": "d13a3824bfd2b4774b671a75cf766a16637a0e67",
    "message": "net: atm: add lec_mutex\n\nsyzbot found its way in net/atm/lec.c, and found an error path\nin lecd_attach() could leave a dangling pointer in dev_lec[].\n\nAdd a mutex to protect dev_lecp[] uses from lecd_attach(),\nlec_vcc_attach() and lec_mcast_attach().\n\nFollowing patch will use this mutex for /proc/net/atm/lec.\n\nBUG: KASAN: slab-use-after-free in lecd_attach net/atm/lec.c:751 [inline]\nBUG: KASAN: slab-use-after-free in lane_ioctl+0x2224/0x23e0 net/atm/lec.c:1008\nRead of size 8 at addr ffff88807c7b8e68 by task syz.1.17/6142\n\nCPU: 1 UID: 0 PID: 6142 Comm: syz.1.17 Not tainted 6.16.0-rc1-syzkaller-00239-g08215f5486ec #0 PREEMPT(full)\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/07/2025\nCall Trace:\n <TASK>\n  __dump_stack lib/dump_stack.c:94 [inline]\n  dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:120\n  print_address_description mm/kasan/report.c:408 [inline]\n  print_report+0xcd/0x680 mm/kasan/report.c:521\n  kasan_report+0xe0/0x110 mm/kasan/report.c:634\n  lecd_attach net/atm/lec.c:751 [inline]\n  lane_ioctl+0x2224/0x23e0 net/atm/lec.c:1008\n  do_vcc_ioctl+0x12c/0x930 net/atm/ioctl.c:159\n  sock_do_ioctl+0x118/0x280 net/socket.c:1190\n  sock_ioctl+0x227/0x6b0 net/socket.c:1311\n  vfs_ioctl fs/ioctl.c:51 [inline]\n  __do_sys_ioctl fs/ioctl.c:907 [inline]\n  __se_sys_ioctl fs/ioctl.c:893 [inline]\n  __x64_sys_ioctl+0x18e/0x210 fs/ioctl.c:893\n  do_syscall_x64 arch/x86/entry/syscall_64.c:63 [inline]\n  do_syscall_64+0xcd/0x4c0 arch/x86/entry/syscall_64.c:94\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n </TASK>\n\nAllocated by task 6132:\n  kasan_save_stack+0x33/0x60 mm/kasan/common.c:47\n  kasan_save_track+0x14/0x30 mm/kasan/common.c:68\n  poison_kmalloc_redzone mm/kasan/common.c:377 [inline]\n  __kasan_kmalloc+0xaa/0xb0 mm/kasan/common.c:394\n  kasan_kmalloc include/linux/kasan.h:260 [inline]\n  __do_kmalloc_node mm/slub.c:4328 [inline]\n  __kvmalloc_node_noprof+0x27b/0x620 mm/slub.c:5015\n  alloc_netdev_mqs+0xd2/0x1570 net/core/dev.c:11711\n  lecd_attach net/atm/lec.c:737 [inline]\n  lane_ioctl+0x17db/0x23e0 net/atm/lec.c:1008\n  do_vcc_ioctl+0x12c/0x930 net/atm/ioctl.c:159\n  sock_do_ioctl+0x118/0x280 net/socket.c:1190\n  sock_ioctl+0x227/0x6b0 net/socket.c:1311\n  vfs_ioctl fs/ioctl.c:51 [inline]\n  __do_sys_ioctl fs/ioctl.c:907 [inline]\n  __se_sys_ioctl fs/ioctl.c:893 [inline]\n  __x64_sys_ioctl+0x18e/0x210 fs/ioctl.c:893\n  do_syscall_x64 arch/x86/entry/syscall_64.c:63 [inline]\n  do_syscall_64+0xcd/0x4c0 arch/x86/entry/syscall_64.c:94\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\nFreed by task 6132:\n  kasan_save_stack+0x33/0x60 mm/kasan/common.c:47\n  kasan_save_track+0x14/0x30 mm/kasan/common.c:68\n  kasan_save_free_info+0x3b/0x60 mm/kasan/generic.c:576\n  poison_slab_object mm/kasan/common.c:247 [inline]\n  __kasan_slab_free+0x51/0x70 mm/kasan/common.c:264\n  kasan_slab_free include/linux/kasan.h:233 [inline]\n  slab_free_hook mm/slub.c:2381 [inline]\n  slab_free mm/slub.c:4643 [inline]\n  kfree+0x2b4/0x4d0 mm/slub.c:4842\n  free_netdev+0x6c5/0x910 net/core/dev.c:11892\n  lecd_attach net/atm/lec.c:744 [inline]\n  lane_ioctl+0x1ce8/0x23e0 net/atm/lec.c:1008\n  do_vcc_ioctl+0x12c/0x930 net/atm/ioctl.c:159\n  sock_do_ioctl+0x118/0x280 net/socket.c:1190\n  sock_ioctl+0x227/0x6b0 net/socket.c:1311\n  vfs_ioctl fs/ioctl.c:51 [inline]\n  __do_sys_ioctl fs/ioctl.c:907 [inline]\n  __se_sys_ioctl fs/ioctl.c:893 [inline]\n  __x64_sys_ioctl+0x18e/0x210 fs/ioctl.c:893\n\nFixes: 1da177e4c3f4 (\"Linux-2.6.12-rc2\")\nReported-by: syzbot+8b64dec3affaed7b3af5@syzkaller.appspotmail.com\nCloses: https://lore.kernel.org/netdev/6852c6f6.050a0220.216029.0018.GAE@google.com/T/#u\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nLink: https://patch.msgid.link/20250618140844.1686882-2-edumazet@google.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
    "author": "Eric Dumazet",
    "date": "2025-06-19T08:36:13-07:00",
    "files_changed": [
      "net/atm/lec.c"
    ],
    "diff": "diff --git a/net/atm/lec.c b/net/atm/lec.c\nindex acef984f3367..1e1f3eb0e2ba 100644\n--- a/net/atm/lec.c\n+++ b/net/atm/lec.c\n@@ -124,6 +124,7 @@ static unsigned char bus_mac[ETH_ALEN] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };\n \n /* Device structures */\n static struct net_device *dev_lec[MAX_LEC_ITF];\n+static DEFINE_MUTEX(lec_mutex);\n \n #if IS_ENABLED(CONFIG_BRIDGE)\n static void lec_handle_bridge(struct sk_buff *skb, struct net_device *dev)\n@@ -685,6 +686,7 @@ static int lec_vcc_attach(struct atm_vcc *vcc, void __user *arg)\n \tint bytes_left;\n \tstruct atmlec_ioc ioc_data;\n \n+\tlockdep_assert_held(&lec_mutex);\n \t/* Lecd must be up in this case */\n \tbytes_left = copy_from_user(&ioc_data, arg, sizeof(struct atmlec_ioc));\n \tif (bytes_left != 0)\n@@ -710,6 +712,7 @@ static int lec_vcc_attach(struct atm_vcc *vcc, void __user *arg)\n \n static int lec_mcast_attach(struct atm_vcc *vcc, int arg)\n {\n+\tlockdep_assert_held(&lec_mutex);\n \tif (arg < 0 || arg >= MAX_LEC_ITF)\n \t\treturn -EINVAL;\n \targ = array_index_nospec(arg, MAX_LEC_ITF);\n@@ -725,6 +728,7 @@ static int lecd_attach(struct atm_vcc *vcc, int arg)\n \tint i;\n \tstruct lec_priv *priv;\n \n+\tlockdep_assert_held(&lec_mutex);\n \tif (arg < 0)\n \t\targ = 0;\n \tif (arg >= MAX_LEC_ITF)\n@@ -742,6 +746,7 @@ static int lecd_attach(struct atm_vcc *vcc, int arg)\n \t\tsnprintf(dev_lec[i]->name, IFNAMSIZ, \"lec%d\", i);\n \t\tif (register_netdev(dev_lec[i])) {\n \t\t\tfree_netdev(dev_lec[i]);\n+\t\t\tdev_lec[i] = NULL;\n \t\t\treturn -EINVAL;\n \t\t}\n \n@@ -1003,6 +1008,7 @@ static int lane_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)\n \t\treturn -ENOIOCTLCMD;\n \t}\n \n+\tmutex_lock(&lec_mutex);\n \tswitch (cmd) {\n \tcase ATMLEC_CTRL:\n \t\terr = lecd_attach(vcc, (int)arg);\n@@ -1017,6 +1023,7 @@ static int lane_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)\n \t\tbreak;\n \t}\n \n+\tmutex_unlock(&lec_mutex);\n \treturn err;\n }\n ",
    "stats": {
      "insertions": 7,
      "deletions": 0,
      "files": 1
    }
  },
  {
    "sha": "a55bc4ffc06d8c965a7d6f0a01ed0ed41380df28",
    "message": "staging: rtl8723bs: Avoid memset() in aes_cipher() and aes_decipher()\n\nAfter commit 6f110a5e4f99 (\"Disable SLUB_TINY for build testing\"), which\ncauses CONFIG_KASAN to be enabled in allmodconfig again, arm64\nallmodconfig builds with older versions of clang (15 through 17) show an\ninstance of -Wframe-larger-than (which breaks the build with\nCONFIG_WERROR=y):\n\n  drivers/staging/rtl8723bs/core/rtw_security.c:1287:5: error: stack frame size (2208) exceeds limit (2048) in 'rtw_aes_decrypt' [-Werror,-Wframe-larger-than]\n   1287 | u32 rtw_aes_decrypt(struct adapter *padapter, u8 *precvframe)\n        |     ^\n\nThis comes from aes_decipher() being inlined in rtw_aes_decrypt().\nRunning the same build with CONFIG_FRAME_WARN=128 shows aes_cipher()\nalso uses a decent amount of stack, just under the limit of 2048:\n\n  drivers/staging/rtl8723bs/core/rtw_security.c:864:19: warning: stack frame size (1952) exceeds limit (128) in 'aes_cipher' [-Wframe-larger-than]\n    864 | static signed int aes_cipher(u8 *key, uint      hdrlen,\n        |                   ^\n\n-Rpass-analysis=stack-frame-layout only shows one large structure on the\nstack, which is the ctx variable inlined from aes128k128d(). A good\nnumber of the other variables come from the additional checks of\nfortified string routines, which are present in memset(), which both\naes_cipher() and aes_decipher() use to initialize some temporary\nbuffers. In this case, since the size is known at compile time, these\nadditional checks should not result in any code generation changes but\nallmodconfig has several sanitizers enabled, which may make it harder\nfor the compiler to eliminate the compile time checks and the variables\nthat come about from them.\n\nThe memset() calls are just initializing these buffers to zero, so use\n'= {}' instead, which is used all over the kernel and does the exact\nsame thing as memset() without the fortify checks, which drops the stack\nusage of these functions by a few hundred kilobytes.\n\n  drivers/staging/rtl8723bs/core/rtw_security.c:864:19: warning: stack frame size (1584) exceeds limit (128) in 'aes_cipher' [-Wframe-larger-than]\n    864 | static signed int aes_cipher(u8 *key, uint      hdrlen,\n        |                   ^\n  drivers/staging/rtl8723bs/core/rtw_security.c:1271:5: warning: stack frame size (1456) exceeds limit (128) in 'rtw_aes_decrypt' [-Wframe-larger-than]\n   1271 | u32 rtw_aes_decrypt(struct adapter *padapter, u8 *precvframe)\n        |     ^\n\nCc: stable@vger.kernel.org\nFixes: 554c0a3abf21 (\"staging: Add rtl8723bs sdio wifi driver\")\nSigned-off-by: Nathan Chancellor <nathan@kernel.org>\nReviewed-by: Dan Carpenter <dan.carpenter@linaro.org>\nLink: https://lore.kernel.org/r/20250609-rtl8723bs-fix-clang-arm64-wflt-v1-1-e2accba43def@kernel.org\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "author": "Nathan Chancellor",
    "date": "2025-06-19T17:33:43+02:00",
    "files_changed": [
      "drivers/staging/rtl8723bs/core/rtw_security.c"
    ],
    "diff": "diff --git a/drivers/staging/rtl8723bs/core/rtw_security.c b/drivers/staging/rtl8723bs/core/rtw_security.c\nindex 1e9eff01b1aa..e9f382c280d9 100644\n--- a/drivers/staging/rtl8723bs/core/rtw_security.c\n+++ b/drivers/staging/rtl8723bs/core/rtw_security.c\n@@ -868,29 +868,21 @@ static signed int aes_cipher(u8 *key, uint\thdrlen,\n \t\tnum_blocks, payload_index;\n \n \tu8 pn_vector[6];\n-\tu8 mic_iv[16];\n-\tu8 mic_header1[16];\n-\tu8 mic_header2[16];\n-\tu8 ctr_preload[16];\n+\tu8 mic_iv[16] = {};\n+\tu8 mic_header1[16] = {};\n+\tu8 mic_header2[16] = {};\n+\tu8 ctr_preload[16] = {};\n \n \t/* Intermediate Buffers */\n-\tu8 chain_buffer[16];\n-\tu8 aes_out[16];\n-\tu8 padded_buffer[16];\n+\tu8 chain_buffer[16] = {};\n+\tu8 aes_out[16] = {};\n+\tu8 padded_buffer[16] = {};\n \tu8 mic[8];\n \tuint\tfrtype  = GetFrameType(pframe);\n \tuint\tfrsubtype  = GetFrameSubType(pframe);\n \n \tfrsubtype = frsubtype>>4;\n \n-\tmemset((void *)mic_iv, 0, 16);\n-\tmemset((void *)mic_header1, 0, 16);\n-\tmemset((void *)mic_header2, 0, 16);\n-\tmemset((void *)ctr_preload, 0, 16);\n-\tmemset((void *)chain_buffer, 0, 16);\n-\tmemset((void *)aes_out, 0, 16);\n-\tmemset((void *)padded_buffer, 0, 16);\n-\n \tif ((hdrlen == WLAN_HDR_A3_LEN) || (hdrlen ==  WLAN_HDR_A3_QOS_LEN))\n \t\ta4_exists = 0;\n \telse\n@@ -1080,15 +1072,15 @@ static signed int aes_decipher(u8 *key, uint\thdrlen,\n \t\t\tnum_blocks, payload_index;\n \tsigned int res = _SUCCESS;\n \tu8 pn_vector[6];\n-\tu8 mic_iv[16];\n-\tu8 mic_header1[16];\n-\tu8 mic_header2[16];\n-\tu8 ctr_preload[16];\n+\tu8 mic_iv[16] = {};\n+\tu8 mic_header1[16] = {};\n+\tu8 mic_header2[16] = {};\n+\tu8 ctr_preload[16] = {};\n \n \t\t/* Intermediate Buffers */\n-\tu8 chain_buffer[16];\n-\tu8 aes_out[16];\n-\tu8 padded_buffer[16];\n+\tu8 chain_buffer[16] = {};\n+\tu8 aes_out[16] = {};\n+\tu8 padded_buffer[16] = {};\n \tu8 mic[8];\n \n \tuint frtype  = GetFrameType(pframe);\n@@ -1096,14 +1088,6 @@ static signed int aes_decipher(u8 *key, uint\thdrlen,\n \n \tfrsubtype = frsubtype>>4;\n \n-\tmemset((void *)mic_iv, 0, 16);\n-\tmemset((void *)mic_header1, 0, 16);\n-\tmemset((void *)mic_header2, 0, 16);\n-\tmemset((void *)ctr_preload, 0, 16);\n-\tmemset((void *)chain_buffer, 0, 16);\n-\tmemset((void *)aes_out, 0, 16);\n-\tmemset((void *)padded_buffer, 0, 16);\n-\n \t/* start to decrypt the payload */\n \n \tnum_blocks = (plen-8) / 16; /* plen including LLC, payload_length and mic) */",
    "stats": {
      "insertions": 14,
      "deletions": 30,
      "files": 1
    }
  },
  {
    "sha": "10876da918fa1aec0227fb4c67647513447f53a9",
    "message": "calipso: Fix null-ptr-deref in calipso_req_{set,del}attr().\n\nsyzkaller reported a null-ptr-deref in sock_omalloc() while allocating\na CALIPSO option.  [0]\n\nThe NULL is of struct sock, which was fetched by sk_to_full_sk() in\ncalipso_req_setattr().\n\nSince commit a1a5344ddbe8 (\"tcp: avoid two atomic ops for syncookies\"),\nreqsk->rsk_listener could be NULL when SYN Cookie is returned to its\nclient, as hinted by the leading SYN Cookie log.\n\nHere are 3 options to fix the bug:\n\n  1) Return 0 in calipso_req_setattr()\n  2) Return an error in calipso_req_setattr()\n  3) Alaways set rsk_listener\n\n1) is no go as it bypasses LSM, but 2) effectively disables SYN Cookie\nfor CALIPSO.  3) is also no go as there have been many efforts to reduce\natomic ops and make TCP robust against DDoS.  See also commit 3b24d854cb35\n(\"tcp/dccp: do not touch listener sk_refcnt under synflood\").\n\nAs of the blamed commit, SYN Cookie already did not need refcounting,\nand no one has stumbled on the bug for 9 years, so no CALIPSO user will\ncare about SYN Cookie.\n\nLet's return an error in calipso_req_setattr() and calipso_req_delattr()\nin the SYN Cookie case.\n\nThis can be reproduced by [1] on Fedora and now connect() of nc times out.\n\n[0]:\nTCP: request_sock_TCPv6: Possible SYN flooding on port [::]:20002. Sending cookies.\nOops: general protection fault, probably for non-canonical address 0xdffffc0000000006: 0000 [#1] PREEMPT SMP KASAN NOPTI\nKASAN: null-ptr-deref in range [0x0000000000000030-0x0000000000000037]\nCPU: 3 UID: 0 PID: 12262 Comm: syz.1.2611 Not tainted 6.14.0 #2\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org 04/01/2014\nRIP: 0010:read_pnet include/net/net_namespace.h:406 [inline]\nRIP: 0010:sock_net include/net/sock.h:655 [inline]\nRIP: 0010:sock_kmalloc+0x35/0x170 net/core/sock.c:2806\nCode: 89 d5 41 54 55 89 f5 53 48 89 fb e8 25 e3 c6 fd e8 f0 91 e3 00 48 8d 7b 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 26 01 00 00 48 b8 00 00 00 00 00 fc ff df 4c 8b\nRSP: 0018:ffff88811af89038 EFLAGS: 00010216\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffff888105266400\nRDX: 0000000000000006 RSI: ffff88800c890000 RDI: 0000000000000030\nRBP: 0000000000000050 R08: 0000000000000000 R09: ffff88810526640e\nR10: ffffed1020a4cc81 R11: ffff88810526640f R12: 0000000000000000\nR13: 0000000000000820 R14: ffff888105266400 R15: 0000000000000050\nFS:  00007f0653a07640(0000) GS:ffff88811af80000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007f863ba096f4 CR3: 00000000163c0005 CR4: 0000000000770ef0\nPKRU: 80000000\nCall Trace:\n <IRQ>\n ipv6_renew_options+0x279/0x950 net/ipv6/exthdrs.c:1288\n calipso_req_setattr+0x181/0x340 net/ipv6/calipso.c:1204\n calipso_req_setattr+0x56/0x80 net/netlabel/netlabel_calipso.c:597\n netlbl_req_setattr+0x18a/0x440 net/netlabel/netlabel_kapi.c:1249\n selinux_netlbl_inet_conn_request+0x1fb/0x320 security/selinux/netlabel.c:342\n selinux_inet_conn_request+0x1eb/0x2c0 security/selinux/hooks.c:5551\n security_inet_conn_request+0x50/0xa0 security/security.c:4945\n tcp_v6_route_req+0x22c/0x550 net/ipv6/tcp_ipv6.c:825\n tcp_conn_request+0xec8/0x2b70 net/ipv4/tcp_input.c:7275\n tcp_v6_conn_request+0x1e3/0x440 net/ipv6/tcp_ipv6.c:1328\n tcp_rcv_state_process+0xafa/0x52b0 net/ipv4/tcp_input.c:6781\n tcp_v6_do_rcv+0x8a6/0x1a40 net/ipv6/tcp_ipv6.c:1667\n tcp_v6_rcv+0x505e/0x5b50 net/ipv6/tcp_ipv6.c:1904\n ip6_protocol_deliver_rcu+0x17c/0x1da0 net/ipv6/ip6_input.c:436\n ip6_input_finish+0x103/0x180 net/ipv6/ip6_input.c:480\n NF_HOOK include/linux/netfilter.h:314 [inline]\n NF_HOOK include/linux/netfilter.h:308 [inline]\n ip6_input+0x13c/0x6b0 net/ipv6/ip6_input.c:491\n dst_input include/net/dst.h:469 [inline]\n ip6_rcv_finish net/ipv6/ip6_input.c:79 [inline]\n ip6_rcv_finish+0xb6/0x490 net/ipv6/ip6_input.c:69\n NF_HOOK include/linux/netfilter.h:314 [inline]\n NF_HOOK include/linux/netfilter.h:308 [inline]\n ipv6_rcv+0xf9/0x490 net/ipv6/ip6_input.c:309\n __netif_receive_skb_one_core+0x12e/0x1f0 net/core/dev.c:5896\n __netif_receive_skb+0x1d/0x170 net/core/dev.c:6009\n process_backlog+0x41e/0x13b0 net/core/dev.c:6357\n __napi_poll+0xbd/0x710 net/core/dev.c:7191\n napi_poll net/core/dev.c:7260 [inline]\n net_rx_action+0x9de/0xde0 net/core/dev.c:7382\n handle_softirqs+0x19a/0x770 kernel/softirq.c:561\n do_softirq.part.0+0x36/0x70 kernel/softirq.c:462\n </IRQ>\n <TASK>\n do_softirq arch/x86/include/asm/preempt.h:26 [inline]\n __local_bh_enable_ip+0xf1/0x110 kernel/softirq.c:389\n local_bh_enable include/linux/bottom_half.h:33 [inline]\n rcu_read_unlock_bh include/linux/rcupdate.h:919 [inline]\n __dev_queue_xmit+0xc2a/0x3c40 net/core/dev.c:4679\n dev_queue_xmit include/linux/netdevice.h:3313 [inline]\n neigh_hh_output include/net/neighbour.h:523 [inline]\n neigh_output include/net/neighbour.h:537 [inline]\n ip6_finish_output2+0xd69/0x1f80 net/ipv6/ip6_output.c:141\n __ip6_finish_output net/ipv6/ip6_output.c:215 [inline]\n ip6_finish_output+0x5dc/0xd60 net/ipv6/ip6_output.c:226\n NF_HOOK_COND include/linux/netfilter.h:303 [inline]\n ip6_output+0x24b/0x8d0 net/ipv6/ip6_output.c:247\n dst_output include/net/dst.h:459 [inline]\n NF_HOOK include/linux/netfilter.h:314 [inline]\n NF_HOOK include/linux/netfilter.h:308 [inline]\n ip6_xmit+0xbbc/0x20d0 net/ipv6/ip6_output.c:366\n inet6_csk_xmit+0x39a/0x720 net/ipv6/inet6_connection_sock.c:135\n __tcp_transmit_skb+0x1a7b/0x3b40 net/ipv4/tcp_output.c:1471\n tcp_transmit_skb net/ipv4/tcp_output.c:1489 [inline]\n tcp_send_syn_data net/ipv4/tcp_output.c:4059 [inline]\n tcp_connect+0x1c0c/0x4510 net/ipv4/tcp_output.c:4148\n tcp_v6_connect+0x156c/0x2080 net/ipv6/tcp_ipv6.c:333\n __inet_stream_connect+0x3a7/0xed0 net/ipv4/af_inet.c:677\n tcp_sendmsg_fastopen+0x3e2/0x710 net/ipv4/tcp.c:1039\n tcp_sendmsg_locked+0x1e82/0x3570 net/ipv4/tcp.c:1091\n tcp_sendmsg+0x2f/0x50 net/ipv4/tcp.c:1358\n inet6_sendmsg+0xb9/0x150 net/ipv6/af_inet6.c:659\n sock_sendmsg_nosec net/socket.c:718 [inline]\n __sock_sendmsg+0xf4/0x2a0 net/socket.c:733\n __sys_sendto+0x29a/0x390 net/socket.c:2187\n __do_sys_sendto net/socket.c:2194 [inline]\n __se_sys_sendto net/socket.c:2190 [inline]\n __x64_sys_sendto+0xe1/0x1c0 net/socket.c:2190\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0xc3/0x1d0 arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\nRIP: 0033:0x7f06553c47ed\nCode: 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 a8 ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f0653a06fc8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c\nRAX: ffffffffffffffda RBX: 00007f0655605fa0 RCX: 00007f06553c47ed\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: 000000000000000b\nRBP: 00007f065545db38 R08: 0000200000000140 R09: 000000000000001c\nR10: f7384d4ea84b01bd R11: 0000000000000246 R12: 0000000000000000\nR13: 00007f0655605fac R14: 00007f0655606038 R15: 00007f06539e7000\n </TASK>\nModules linked in:\n\n[1]:\ndnf install -y selinux-policy-targeted policycoreutils netlabel_tools procps-ng nmap-ncat\nmount -t selinuxfs none /sys/fs/selinux\nload_policy\nnetlabelctl calipso add pass doi:1\nnetlabelctl map del default\nnetlabelctl map add default address:::1 protocol:calipso,1\nsysctl net.ipv4.tcp_syncookies=2\nnc -l ::1 80 &\nnc ::1 80\n\nFixes: e1adea927080 (\"calipso: Allow request sockets to be relabelled by the lsm.\")\nReported-by: syzkaller <syzkaller@googlegroups.com>\nReported-by: John Cheung <john.cs.hey@gmail.com>\nCloses: https://lore.kernel.org/netdev/CAP=Rh=MvfhrGADy+-WJiftV2_WzMH4VEhEFmeT28qY+4yxNu4w@mail.gmail.com/\nSigned-off-by: Kuniyuki Iwashima <kuniyu@google.com>\nAcked-by: Paul Moore <paul@paul-moore.com>\nLink: https://patch.msgid.link/20250617224125.17299-1-kuni1840@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
    "author": "Kuniyuki Iwashima",
    "date": "2025-06-19T08:33:09-07:00",
    "files_changed": [
      "net/ipv6/calipso.c"
    ],
    "diff": "diff --git a/net/ipv6/calipso.c b/net/ipv6/calipso.c\nindex 62618a058b8f..a247bb93908b 100644\n--- a/net/ipv6/calipso.c\n+++ b/net/ipv6/calipso.c\n@@ -1207,6 +1207,10 @@ static int calipso_req_setattr(struct request_sock *req,\n \tstruct ipv6_opt_hdr *old, *new;\n \tstruct sock *sk = sk_to_full_sk(req_to_sk(req));\n \n+\t/* sk is NULL for SYN+ACK w/ SYN Cookie */\n+\tif (!sk)\n+\t\treturn -ENOMEM;\n+\n \tif (req_inet->ipv6_opt && req_inet->ipv6_opt->hopopt)\n \t\told = req_inet->ipv6_opt->hopopt;\n \telse\n@@ -1247,6 +1251,10 @@ static void calipso_req_delattr(struct request_sock *req)\n \tstruct ipv6_txoptions *txopts;\n \tstruct sock *sk = sk_to_full_sk(req_to_sk(req));\n \n+\t/* sk is NULL for SYN+ACK w/ SYN Cookie */\n+\tif (!sk)\n+\t\treturn;\n+\n \tif (!req_inet->ipv6_opt || !req_inet->ipv6_opt->hopopt)\n \t\treturn;\n ",
    "stats": {
      "insertions": 8,
      "deletions": 0,
      "files": 1
    }
  },
  {
    "sha": "547e836661554dcfa15c212a3821664e85b4191a",
    "message": "btrfs: handle csum tree error with rescue=ibadroots correctly\n\n[BUG]\nThere is syzbot based reproducer that can crash the kernel, with the\nfollowing call trace: (With some debug output added)\n\n DEBUG: rescue=ibadroots parsed\n BTRFS: device fsid 14d642db-7b15-43e4-81e6-4b8fac6a25f8 devid 1 transid 8 /dev/loop0 (7:0) scanned by repro (1010)\n BTRFS info (device loop0): first mount of filesystem 14d642db-7b15-43e4-81e6-4b8fac6a25f8\n BTRFS info (device loop0): using blake2b (blake2b-256-generic) checksum algorithm\n BTRFS info (device loop0): using free-space-tree\n BTRFS warning (device loop0): checksum verify failed on logical 5312512 mirror 1 wanted 0xb043382657aede36608fd3386d6b001692ff406164733d94e2d9a180412c6003 found 0x810ceb2bacb7f0f9eb2bf3b2b15c02af867cb35ad450898169f3b1f0bd818651 level 0\n DEBUG: read tree root path failed for tree csum, ret=-5\n BTRFS warning (device loop0): checksum verify failed on logical 5328896 mirror 1 wanted 0x51be4e8b303da58e6340226815b70e3a93592dac3f30dd510c7517454de8567a found 0x51be4e8b303da58e634022a315b70e3a93592dac3f30dd510c7517454de8567a level 0\n BTRFS warning (device loop0): checksum verify failed on logical 5292032 mirror 1 wanted 0x1924ccd683be9efc2fa98582ef58760e3848e9043db8649ee382681e220cdee4 found 0x0cb6184f6e8799d9f8cb335dccd1d1832da1071d12290dab3b85b587ecacca6e level 0\n process 'repro' launched './file2' with NULL argv: empty string added\n DEBUG: no csum root, idatacsums=0 ibadroots=134217728\n Oops: general protection fault, probably for non-canonical address 0xdffffc0000000041: 0000 [#1] SMP KASAN NOPTI\n KASAN: null-ptr-deref in range [0x0000000000000208-0x000000000000020f]\n CPU: 5 UID: 0 PID: 1010 Comm: repro Tainted: G           OE       6.15.0-custom+ #249 PREEMPT(full)\n Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS unknown 02/02/2022\n RIP: 0010:btrfs_lookup_csum+0x93/0x3d0 [btrfs]\n Call Trace:\n  <TASK>\n  btrfs_lookup_bio_sums+0x47a/0xdf0 [btrfs]\n  btrfs_submit_bbio+0x43e/0x1a80 [btrfs]\n  submit_one_bio+0xde/0x160 [btrfs]\n  btrfs_readahead+0x498/0x6a0 [btrfs]\n  read_pages+0x1c3/0xb20\n  page_cache_ra_order+0x4b5/0xc20\n  filemap_get_pages+0x2d3/0x19e0\n  filemap_read+0x314/0xde0\n  __kernel_read+0x35b/0x900\n  bprm_execve+0x62e/0x1140\n  do_execveat_common.isra.0+0x3fc/0x520\n  __x64_sys_execveat+0xdc/0x130\n  do_syscall_64+0x54/0x1d0\n  entry_SYSCALL_64_after_hwframe+0x76/0x7e\n ---[ end trace 0000000000000000 ]---\n\n[CAUSE]\nFirstly the fs has a corrupted csum tree root, thus to mount the fs we\nhave to go \"ro,rescue=ibadroots\" mount option.\n\nNormally with that mount option, a bad csum tree root should set\nBTRFS_FS_STATE_NO_DATA_CSUMS flag, so that any future data read will\nignore csum search.\n\nBut in this particular case, we have the following call trace that\ncaused NULL csum root, but not setting BTRFS_FS_STATE_NO_DATA_CSUMS:\n\nload_global_roots_objectid():\n\n\t\tret = btrfs_search_slot();\n\t\t/* Succeeded */\n\t\tbtrfs_item_key_to_cpu()\n\t\tfound = true;\n\t\t/* We found the root item for csum tree. */\n\t\troot = read_tree_root_path();\n\t\tif (IS_ERR(root)) {\n\t\t\tif (!btrfs_test_opt(fs_info, IGNOREBADROOTS))\n\t\t\t/*\n\t\t\t * Since we have rescue=ibadroots mount option,\n\t\t\t * @ret is still 0.\n\t\t\t */\n\t\t\tbreak;\n\tif (!found || ret) {\n\t\t/* @found is true, @ret is 0, error handling for csum\n\t\t * tree is skipped.\n\t\t */\n\t}\n\nThis means we completely skipped to set BTRFS_FS_STATE_NO_DATA_CSUMS if\nthe csum tree is corrupted, which results unexpected later csum lookup.\n\n[FIX]\nIf read_tree_root_path() failed, always populate @ret to the error\nnumber.\n\nAs at the end of the function, we need @ret to determine if we need to\ndo the extra error handling for csum tree.\n\nFixes: abed4aaae4f7 (\"btrfs: track the csum, extent, and free space trees in a rb tree\")\nReported-by: Zhiyu Zhang <zhiyuzhang999@gmail.com>\nReported-by: Longxing Li <coregee2000@gmail.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
    "author": "Qu Wenruo",
    "date": "2025-06-19T15:21:06+02:00",
    "files_changed": [
      "fs/btrfs/disk-io.c"
    ],
    "diff": "diff --git a/fs/btrfs/disk-io.c b/fs/btrfs/disk-io.c\nindex f48f9d924a62..0d6ad7512f21 100644\n--- a/fs/btrfs/disk-io.c\n+++ b/fs/btrfs/disk-io.c\n@@ -2158,8 +2158,7 @@ static int load_global_roots_objectid(struct btrfs_root *tree_root,\n \t\tfound = true;\n \t\troot = read_tree_root_path(tree_root, path, &key);\n \t\tif (IS_ERR(root)) {\n-\t\t\tif (!btrfs_test_opt(fs_info, IGNOREBADROOTS))\n-\t\t\t\tret = PTR_ERR(root);\n+\t\t\tret = PTR_ERR(root);\n \t\t\tbreak;\n \t\t}\n \t\tset_bit(BTRFS_ROOT_TRACK_DIRTY, &root->state);",
    "stats": {
      "insertions": 1,
      "deletions": 2,
      "files": 1
    }
  }
]